[project]
name = "FastAPI-Boilerplate"
version = "0.1.0"
description = "Basic FastAPI Boilerplate"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "alembic>=1.16.4",
    "bcrypt>=4.3.0",
    "fastapi[standard]>=0.115.12",
    "psycopg2-binary>=2.9.10",
    "pydantic-settings>=2.9.1",
    "pydantic[email]>=2.11.4",
    "pyjwt>=2.10.1",
    "python-dotenv>=1.1.0",
    "redis>=6.1.0",
    "structlog>=25.4.0",
    "uvicorn>=0.34.2",
]

[project.scripts]
demo-app = "uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "ruff>=0.1.0",
]

[dependency-groups]
dev = [
    "ruff>=0.11.9",
]



[tool.ruff]
target-version = "py311"
line-length = 88
indent-width = 4
src = ["."]  # tells Ruff that `app` is your own code (first-party)

# Optional: Exclude common virtualenv & build folders
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".git-rewrite", ".hg", ".mypy_cache", ".nox",
    ".pants.d", ".pytype", ".ruff_cache", ".svn", ".tox", ".venv", "__pypackages__",
    "_build", "buck-out", "build", "dist", "node_modules", "venv","migrations"
]

[tool.ruff.lint]
select = [
  "E", "W", "F", "I", "UP",   # Core: style, errors, sorting, upgrading
  "B", "PL", "SIM",           # Bugs, pylint, simplify
  "G", "LOG",                 # Logging rules
  "C4", "Q", "PYI",           # Comprehensions, quotes, typing
  "FA", "TID", "TCH",         # Future annotations, tidy imports
  "RUF"                       # Ruff-specific rules
]
ignore = ["SIM112", "G004", "PLR2004", "W293", "W291", "PLR0913"]

# Tell Ruff how to treat your files
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
docstring-code-format = true
docstring-code-line-length = "dynamic"
